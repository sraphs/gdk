{
	"github.com/sraphs/gdk/blob.ExampleBucket_Delete": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "if err := bucket.Delete(ctx, \"foo.txt\"); err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/blob.ExampleBucket_NewRangeReader": {
		"imports": "import (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Open the key \"foo.txt\" for reading at offset 1024 and read up to 4096 bytes.\nr, err := bucket.NewRangeReader(ctx, \"foo.txt\", 1024, 4096, nil)\nif err != nil {\n\treturn err\n}\ndefer r.Close()\n// Copy from the read range to stdout.\nif _, err := io.Copy(os.Stdout, r); err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/blob.ExampleBucket_NewReader": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Open the key \"foo.txt\" for reading with the default options.\nr, err := bucket.NewReader(ctx, \"foo.txt\", nil)\nif err != nil {\n\treturn err\n}\ndefer r.Close()\n// Readers also have a limited view of the blob's metadata.\nfmt.Println(\"Content-Type:\", r.ContentType())\nfmt.Println()\n// Copy from the reader to stdout.\nif _, err := io.Copy(os.Stdout, r); err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/blob.ExampleBucket_NewWriter": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Open the key \"foo.txt\" for writing with the default options.\nw, err := bucket.NewWriter(ctx, \"foo.txt\", nil)\nif err != nil {\n\treturn err\n}\n_, writeErr := fmt.Fprintln(w, \"Hello, World!\")\n// Always check the return value of Close when writing.\ncloseErr := w.Close()\nif writeErr != nil {\n\tlog.Fatal(writeErr)\n}\nif closeErr != nil {\n\tlog.Fatal(closeErr)\n}"
	},
	"github.com/sraphs/gdk/blob.ExampleBucket_NewWriter_cancel": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Create a cancelable context from the existing context.\nwriteCtx, cancelWrite := context.WithCancel(ctx)\ndefer cancelWrite()\n\n// Open the key \"foo.txt\" for writing with the default options.\nw, err := bucket.NewWriter(writeCtx, \"foo.txt\", nil)\nif err != nil {\n\treturn err\n}\n\n// Assume some writes happened and we encountered an error.\n// Now we want to abort the write.\n\nif err != nil {\n\t// First cancel the context.\n\tcancelWrite()\n\t// You must still close the writer to avoid leaking resources.\n\tw.Close()\n}"
	},
	"github.com/sraphs/gdk/blob.ExamplePrefixedBucket": {
		"imports": "import \"github.com/sraphs/gdk/blob\"",
		"code": "// Wrap the bucket using blob.PrefixedBucket.\n// The prefix should end with \"/\", so that the resulting bucket operates\n// in a subfolder.\nbucket = blob.PrefixedBucket(bucket, \"a/subfolder/\")\n\n// The original bucket is no longer usable; it has been closed.\n// The wrapped bucket should be closed when done.\ndefer bucket.Close()\n\n// Bucket operations on \u003ckey\u003e will be translated to \"a/subfolder/\u003ckey\u003e\"."
	},
	"github.com/sraphs/gdk/blob.ExampleSingleKeyBucket": {
		"imports": "import \"github.com/sraphs/gdk/blob\"",
		"code": "// Wrap the bucket using blob.SingleKeyBucket.\n// The bucket always references the provided key.\nbucket = blob.SingleKeyBucket(bucket, \"foo.txt\")\n\n// The original bucket is no longer usable; it has been closed.\n// The wrapped bucket should be closed when done.\ndefer bucket.Close()\n\n// Bucket operations will ignore the passed-in key and always reference foo.txt."
	},
	"github.com/sraphs/gdk/blob.Example_openFromURLWithPrefix": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Connect to a bucket using a URL, using the \"prefix\" query parameter to\n// target a subfolder in the bucket.\n// The prefix should end with \"/\", so that the resulting bucket operates\n// in a subfolder.\nb, err := blob.OpenBucket(ctx, \"mem://?prefix=a/subfolder/\")\nif err != nil {\n\treturn err\n}\ndefer b.Close()\n\n// Bucket operations on \u003ckey\u003e will be translated to \"a/subfolder/\u003ckey\u003e\"."
	},
	"github.com/sraphs/gdk/blob.Example_openFromURLWithSingleKey": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/blob\"\n)",
		"code": "// Connect to a bucket using a URL, using the \"key\" query parameter to\n// make the bucket always reference that key.\nb, err := blob.OpenBucket(ctx, \"mem://?key=foo.txt\")\nif err != nil {\n\treturn err\n}\ndefer b.Close()\n\n// Bucket operations will ignore the passed-in key and always reference foo.txt."
	},
	"github.com/sraphs/gdk/blob/fileblob.ExampleOpenBucket": {
		"imports": "import (\n\t\"os\"\n\n\t\"github.com/sraphs/gdk/blob/fileblob\"\n)",
		"code": "// The directory you pass to fileblob.OpenBucket must exist first.\nconst myDir = \"path/to/local/directory\"\nif err := os.MkdirAll(myDir, 0777); err != nil {\n\treturn err\n}\n\n// Create a file-based bucket.\nbucket, err := fileblob.OpenBucket(myDir, nil)\nif err != nil {\n\treturn err\n}\ndefer bucket.Close()"
	},
	"github.com/sraphs/gdk/blob/memblob.ExampleOpenBucket": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/blob/memblob\"\n)",
		"code": "// Create an in-memory bucket.\nbucket := memblob.OpenBucket(nil)\ndefer bucket.Close()\n\n// Now we can use bucket to read or write files to the bucket.\nerr := bucket.WriteAll(ctx, \"my-key\", []byte(\"hello world\"), nil)\nif err != nil {\n\treturn err\n}\ndata, err := bucket.ReadAll(ctx, \"my-key\")\nif err != nil {\n\treturn err\n}\nfmt.Println(string(data))\n\n// Output:\n// hello world"
	},
	"github.com/sraphs/gdk/blob/s3blob.ExampleOpenBucket": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/sraphs/gdk/blob/s3blob\"\n)",
		"code": "// Establish a AWS V2 Config.\n// See https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/ for more info.\nctx := context.Background()\ncfg, err := config.LoadDefaultConfig(ctx)\nif err != nil {\n\treturn err\n}\n\n// Create a *blob.Bucket.\nclient := s3.NewFromConfig(cfg)\nbucket, err := s3blob.OpenBucket(ctx, client, \"my-bucket\", nil)\nif err != nil {\n\treturn err\n}\ndefer bucket.Close()"
	},
	"github.com/sraphs/gdk/blob/s3blob.Example_openBucketFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/blob\"\n\t_ \"github.com/sraphs/gdk/blob/s3blob\"\n)",
		"code": "// blob.OpenBucket creates a *blob.Bucket from a URL.\nbucket, err := blob.OpenBucket(ctx, \"s3://my-bucket?region=us-west-1\")\nif err != nil {\n\treturn err\n}\ndefer bucket.Close()\n\n// Forcing AWS SDK V2.\nbucket, err = blob.OpenBucket(ctx, \"s3://my-bucket?region=us-west-1\u0026awssdk=2\")\nif err != nil {\n\treturn err\n}\ndefer bucket.Close()"
	},
	"github.com/sraphs/gdk/pubsub.ExampleSubscription_Receive": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n)",
		"code": "// Loop on received messages.\nfor {\n\tmsg, err := subscription.Receive(ctx)\n\tif err != nil {\n\t\t// Errors from Receive indicate that Receive will no longer succeed.\n\t\tlog.Printf(\"Receiving message: %v\", err)\n\t\tbreak\n\t}\n\t// Do work based on the message, for example:\n\tfmt.Printf(\"Got message: %q\\n\", msg.Body)\n\t// Messages must always be acknowledged with Ack.\n\tmsg.Ack()\n}"
	},
	"github.com/sraphs/gdk/pubsub.ExampleSubscription_Receive_concurrent": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n)",
		"code": "// Loop on received messages. We can use a channel as a semaphore to limit how\n// many goroutines we have active at a time as well as wait on the goroutines\n// to finish before exiting.\nconst maxHandlers = 10\nsem := make(chan struct{}, maxHandlers)\nrecvLoop:\nfor {\n\tmsg, err := subscription.Receive(ctx)\n\tif err != nil {\n\t\t// Errors from Receive indicate that Receive will no longer succeed.\n\t\tlog.Printf(\"Receiving message: %v\", err)\n\t\tbreak\n\t}\n\n\t// Wait if there are too many active handle goroutines and acquire the\n\t// semaphore. If the context is canceled, stop waiting and start shutting\n\t// down.\n\tselect {\n\tcase sem \u003c- struct{}{}:\n\tcase \u003c-ctx.Done():\n\t\tbreak recvLoop\n\t}\n\n\t// Handle the message in a new goroutine.\n\tgo func() {\n\t\tdefer func() { \u003c-sem }() // Release the semaphore.\n\t\tdefer msg.Ack()          // Messages must always be acknowledged with Ack.\n\n\t\t// Do work based on the message, for example:\n\t\tfmt.Printf(\"Got message: %q\\n\", msg.Body)\n\t}()\n}\n\n// We're no longer receiving messages. Wait to finish handling any\n// unacknowledged messages by totally acquiring the semaphore.\nfor n := 0; n \u003c maxHandlers; n++ {\n\tsem \u003c- struct{}{}\n}"
	},
	"github.com/sraphs/gdk/pubsub.ExampleTopic_Send": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n)",
		"code": "err := topic.Send(ctx, \u0026pubsub.Message{\n\tBody: []byte(\"Hello, World!\\n\"),\n\t// Metadata is optional and can be nil.\n\tMetadata: map[string]string{\n\t\t// These are examples of metadata.\n\t\t// There is nothing special about the key names.\n\t\t\"language\":   \"en\",\n\t\t\"importance\": \"high\",\n\t},\n})\nif err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/pubsub/kafkapubsub.ExampleOpenSubscription": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub/kafkapubsub\"\n)",
		"code": "// The set of brokers in the Kafka cluster.\naddrs := []string{\"1.2.3.4:9092\"}\n// The Kafka client configuration to use.\nconfig := kafkapubsub.MinimalConfig()\n\n// Construct a *pubsub.Subscription, joining the consumer group \"my-group\"\n// and receiving messages from \"my-topic\".\nsubscription, err := kafkapubsub.OpenSubscription(\n\taddrs, config, \"my-group\", []string{\"my-topic\"}, nil)\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/kafkapubsub.ExampleOpenTopic": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub/kafkapubsub\"\n)",
		"code": "// The set of brokers in the Kafka cluster.\naddrs := []string{\"1.2.3.4:9092\"}\n// The Kafka client configuration to use.\nconfig := kafkapubsub.MinimalConfig()\n\n// Construct a *pubsub.Topic.\ntopic, err := kafkapubsub.OpenTopic(addrs, config, \"my-topic\", nil)\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/kafkapubsub.Example_openSubscriptionFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/kafkapubsub\"\n)",
		"code": "// pubsub.OpenSubscription creates a *pubsub.Subscription from a URL.\n// The host + path are used as the consumer group name.\n// The \"topic\" query parameter sets one or more topics to subscribe to.\n// The set of brokers must be in an environment variable KAFKA_BROKERS.\nsubscription, err := pubsub.OpenSubscription(ctx,\n\t\"kafka://my-group?topic=my-topic\")\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/kafkapubsub.Example_openTopicFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/kafkapubsub\"\n)",
		"code": "// pubsub.OpenTopic creates a *pubsub.Topic from a URL.\n// The host + path are the topic name to send to.\n// The set of brokers must be in an environment variable KAFKA_BROKERS.\ntopic, err := pubsub.OpenTopic(ctx, \"kafka://my-topic\")\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/mempubsub.ExampleNewSubscription": {
		"imports": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/sraphs/gdk/pubsub/mempubsub\"\n)",
		"code": "// Construct a *pubsub.Topic.\ntopic := mempubsub.NewTopic()\ndefer topic.Shutdown(ctx)\n\n// Construct a *pubsub.Subscription for the topic.\nsubscription := mempubsub.NewSubscription(topic, 1*time.Minute /* ack deadline */)\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/mempubsub.ExampleNewTopic": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub/mempubsub\"\n)",
		"code": "topic := mempubsub.NewTopic()\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/mempubsub.Example_openSubscriptionFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/mempubsub\"\n)",
		"code": "// Create a topic.\ntopic, err := pubsub.OpenTopic(ctx, \"mem://topicA\")\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)\n\n// Create a subscription connected to that topic.\nsubscription, err := pubsub.OpenSubscription(ctx, \"mem://topicA\")\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/mempubsub.Example_openTopicFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/mempubsub\"\n)",
		"code": "topic, err := pubsub.OpenTopic(ctx, \"mem://topicA\")\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.ExampleOpenQueueSubscription": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/nats-io/nats.go\"\n\t\"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "natsConn, err := nats.Connect(\"nats://nats.example.com\")\nif err != nil {\n\treturn err\n}\ndefer natsConn.Close()\n\nsubscription, err := natspubsub.OpenSubscription(\n\tnatsConn,\n\t\"example.mysubject\",\n\t\u0026natspubsub.SubscriptionOptions{Queue: \"queue1\"})\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.ExampleOpenSubscription": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/nats-io/nats.go\"\n\t\"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "natsConn, err := nats.Connect(\"nats://nats.example.com\")\nif err != nil {\n\treturn err\n}\ndefer natsConn.Close()\n\nsubscription, err := natspubsub.OpenSubscription(\n\tnatsConn,\n\t\"example.mysubject\",\n\tnil)\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.ExampleOpenTopic": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/nats-io/nats.go\"\n\t\"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "natsConn, err := nats.Connect(\"nats://nats.example.com\")\nif err != nil {\n\treturn err\n}\ndefer natsConn.Close()\n\ntopic, err := natspubsub.OpenTopic(natsConn, \"example.mysubject\", nil)\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.Example_openQueueSubscriptionFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "// pubsub.OpenSubscription creates a *pubsub.Subscription from a URL.\n// This URL will Dial the NATS server at the URL in the environment variable\n// NATS_SERVER_URL and receive messages with subject \"example.mysubject\"\n// This URL will be parsed and the queue attribute will be used as the Queue parameter when creating the NATS Subscription.\nsubscription, err := pubsub.OpenSubscription(ctx, \"nats://example.mysubject?queue=myqueue\")\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.Example_openSubscriptionFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "// pubsub.OpenSubscription creates a *pubsub.Subscription from a URL.\n// This URL will Dial the NATS server at the URL in the environment variable\n// NATS_SERVER_URL and receive messages with subject \"example.mysubject\".\nsubscription, err := pubsub.OpenSubscription(ctx, \"nats://example.mysubject\")\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/natspubsub.Example_openTopicFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/natspubsub\"\n)",
		"code": "// pubsub.OpenTopic creates a *pubsub.Topic from a URL.\n// This URL will Dial the NATS server at the URL in the environment variable\n// NATS_SERVER_URL and send messages with subject \"example.mysubject\".\ntopic, err := pubsub.OpenTopic(ctx, \"nats://example.mysubject\")\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/rabbitpubsub.ExampleOpenSubscription": {
		"imports": "import (\n\t\"context\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n\t\"github.com/sraphs/gdk/pubsub/rabbitpubsub\"\n)",
		"code": "rabbitConn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\nif err != nil {\n\treturn err\n}\ndefer rabbitConn.Close()\nsubscription := rabbitpubsub.OpenSubscription(rabbitConn, \"myqueue\", nil)\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/rabbitpubsub.ExampleOpenTopic": {
		"imports": "import (\n\t\"context\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n\t\"github.com/sraphs/gdk/pubsub/rabbitpubsub\"\n)",
		"code": "rabbitConn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\nif err != nil {\n\treturn err\n}\ndefer rabbitConn.Close()\ntopic := rabbitpubsub.OpenTopic(rabbitConn, \"myexchange\", nil)\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/rabbitpubsub.Example_openSubscriptionFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/rabbitpubsub\"\n)",
		"code": "// pubsub.OpenSubscription creates a *pubsub.Subscription from a URL.\n// This URL will Dial the RabbitMQ server at the URL in the environment\n// variable RABBIT_SERVER_URL and open the queue \"myqueue\".\nsubscription, err := pubsub.OpenSubscription(ctx, \"rabbit://myqueue\")\nif err != nil {\n\treturn err\n}\ndefer subscription.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/pubsub/rabbitpubsub.Example_openTopicFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/pubsub\"\n\t_ \"github.com/sraphs/gdk/pubsub/rabbitpubsub\"\n)",
		"code": "// pubsub.OpenTopic creates a *pubsub.Topic from a URL.\n// This URL will Dial the RabbitMQ server at the URL in the environment\n// variable RABBIT_SERVER_URL and open the exchange \"myexchange\".\ntopic, err := pubsub.OpenTopic(ctx, \"rabbit://myexchange\")\nif err != nil {\n\treturn err\n}\ndefer topic.Shutdown(ctx)"
	},
	"github.com/sraphs/gdk/runtimevar.ExampleDecryptDecode": {
		"imports": "import (\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t\"github.com/sraphs/gdk/secrets\"\n)",
		"code": "decodeFunc := runtimevar.DecryptDecode(keeper, runtimevar.StringDecode)\ndecoder := runtimevar.NewDecoder(\"\", decodeFunc)"
	},
	"github.com/sraphs/gdk/runtimevar.ExampleVariable_Latest": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n)",
		"code": "snapshot, err := v.Latest(context.Background())\nif err != nil {\n\tlog.Fatalf(\"Error in retrieving variable: %v\", err)\n}"
	},
	"github.com/sraphs/gdk/runtimevar.Example_jsonDecoder": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t\"github.com/sraphs/gdk/runtimevar/constantvar\"\n)",
		"code": "// Config is the sample config struct we're going to parse our JSON into.\ntype Config struct {\n\tHost string\n\tPort int\n}\n\n// A sample JSON config that will decode into Config.\nconst jsonConfig = `{\"Host\": \"github.com/sraphs/gdk\", \"Port\": 8080}`\n\n// Construct a Decoder that decodes raw bytes into our config.\ndecoder := runtimevar.NewDecoder(Config{}, runtimevar.JSONDecode)\n\n// Next, a construct a *Variable using a constructor or URL opener.\n// This example uses constantvar.\n// If you're using a URL opener, you can't decode JSON into a struct, but\n// you can use the query parameter \"decoder=jsonmap\" to decode into a map.\nv := constantvar.NewBytes([]byte(jsonConfig), decoder)\ndefer v.Close()\n// snapshot.Value will be of type Config."
	},
	"github.com/sraphs/gdk/runtimevar/blobvar.Example_openVariableFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t_ \"github.com/sraphs/gdk/runtimevar/blobvar\"\n)",
		"code": "// runtimevar.OpenVariable creates a *runtimevar.Variable from a URL.\n// The default opener opens a blob.Bucket via a URL, based on the environment\n// variable BLOBVAR_BUCKET_URL.\n\nv, err := runtimevar.OpenVariable(ctx, \"blob://myvar.txt?decoder=string\")\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/constantvar.Example_openVariableFromURL": {
		"imports": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t_ \"github.com/sraphs/gdk/runtimevar/constantvar\"\n)",
		"code": "// runtimevar.OpenVariable creates a *runtimevar.Variable from a URL.\n\nv, err := runtimevar.OpenVariable(ctx, \"constant://?val=hello+world\u0026decoder=string\")\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/etcdvar.ExampleOpenVariable": {
		"imports": "import (\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t\"github.com/sraphs/gdk/runtimevar/etcdvar\"\n\t\"go.etcd.io/etcd/client/v3\"\n)",
		"code": "// Connect to the etcd server.\nclient, err := clientv3.NewFromURL(\"http://your.etcd.server:9999\")\nif err != nil {\n\treturn err\n}\n\n// Construct a *runtimevar.Variable that watches the variable.\nv, err := etcdvar.OpenVariable(client, \"cfg-variable-name\", runtimevar.StringDecoder, nil)\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/etcdvar.Example_openVariableFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t_ \"github.com/sraphs/gdk/runtimevar/etcdvar\"\n)",
		"code": "// runtimevar.OpenVariable creates a *runtimevar.Variable from a URL.\n// The default opener connects to an etcd server based on the environment\n// variable ETCD_SERVER_URL.\n\nv, err := runtimevar.OpenVariable(ctx, \"etcd://myvarname?decoder=string\")\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/filevar.Example_openVariableFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t_ \"github.com/sraphs/gdk/runtimevar/filevar\"\n)",
		"code": "// runtimevar.OpenVariable creates a *runtimevar.Variable from a URL.\n\nv, err := runtimevar.OpenVariable(ctx, \"file:///path/to/config.txt?decoder=string\")\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/httpvar.ExampleOpenVariable": {
		"imports": "import (\n\t\"net/http\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t\"github.com/sraphs/gdk/runtimevar/httpvar\"\n)",
		"code": "// Create an HTTP.Client\nhttpClient := http.DefaultClient\n\n// Construct a *runtimevar.Variable that watches the page.\nv, err := httpvar.OpenVariable(httpClient, \"http://example.com\", runtimevar.StringDecoder, nil)\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/runtimevar/httpvar.Example_openVariableFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/runtimevar\"\n\t_ \"github.com/sraphs/gdk/runtimevar/httpvar\"\n)",
		"code": "// runtimevar.OpenVariable creates a *runtimevar.Variable from a URL.\n// The default opener connects to an etcd server based on the environment\n// variable ETCD_SERVER_URL.\n\nv, err := runtimevar.OpenVariable(ctx, \"http://myserver.com/foo.txt?decoder=string\")\nif err != nil {\n\treturn err\n}\ndefer v.Close()"
	},
	"github.com/sraphs/gdk/secrets.ExampleKeeper_Decrypt": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/secrets\"\n)",
		"code": "var cipherText []byte // obtained from elsewhere and random-looking\nplainText, err := keeper.Decrypt(ctx, cipherText)\nif err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/secrets.ExampleKeeper_Encrypt": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/secrets\"\n)",
		"code": "plainText := []byte(\"Secrets secrets...\")\ncipherText, err := keeper.Encrypt(ctx, plainText)\nif err != nil {\n\treturn err\n}"
	},
	"github.com/sraphs/gdk/secrets/hashivault.ExampleOpenKeeper": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/hashicorp/vault/api\"\n\t\"github.com/sraphs/gdk/secrets/hashivault\"\n)",
		"code": "// Get a client to use with the Vault API.\nclient, err := hashivault.Dial(ctx, \u0026hashivault.Config{\n\tToken: \"CLIENT_TOKEN\",\n\tAPIConfig: api.Config{\n\t\tAddress: \"http://127.0.0.1:8200\",\n\t},\n})\nif err != nil {\n\treturn err\n}\n\n// Construct a *secrets.Keeper.\nkeeper := hashivault.OpenKeeper(client, \"my-key\", nil)\ndefer keeper.Close()"
	},
	"github.com/sraphs/gdk/secrets/hashivault.Example_openFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/secrets\"\n\t_ \"github.com/sraphs/gdk/secrets/hashivault\"\n)",
		"code": "keeper, err := secrets.OpenKeeper(ctx, \"hashivault://mykey\")\nif err != nil {\n\treturn err\n}\ndefer keeper.Close()"
	},
	"github.com/sraphs/gdk/secrets/localsecrets.ExampleNewKeeper": {
		"imports": "import \"github.com/sraphs/gdk/secrets/localsecrets\"",
		"code": "secretKey, err := localsecrets.NewRandomKey()\nif err != nil {\n\treturn err\n}\nkeeper := localsecrets.NewKeeper(secretKey)\ndefer keeper.Close()"
	},
	"github.com/sraphs/gdk/secrets/localsecrets.Example_openFromURL": {
		"imports": "import (\n\t\"context\"\n\n\t\"github.com/sraphs/gdk/secrets\"\n\t_ \"github.com/sraphs/gdk/secrets/localsecrets\"\n)",
		"code": "// Using \"base64key://\", a new random key will be generated.\nrandomKeyKeeper, err := secrets.OpenKeeper(ctx, \"base64key://\")\nif err != nil {\n\treturn err\n}\ndefer randomKeyKeeper.Close()\n\n// Otherwise, the URL hostname must be a base64-encoded key, of length 32 bytes when decoded.\n// Note that base64.URLEncode should be used, to avoid URL-unsafe characters.\nsavedKeyKeeper, err := secrets.OpenKeeper(ctx, \"base64key://smGbjm71Nxd1Ig5FS0wj9SlbzAIrnolCz9bQQ6uAhl4=\")\nif err != nil {\n\treturn err\n}\ndefer savedKeyKeeper.Close()"
	}
}
